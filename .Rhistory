# for the ENTIRE diamonds dataset.
price.range <- range(diamonds$price)
carat.range <- range(diamonds$carat)
# Define a UI using a fluidPage layout
ui <- fluidPage(
# Include a `titlePanel` with the title "Diamond Viewer"
titlePanel("Diamond Viewer"),
# Include a `sidebarLayout()`
sidebarLayout(
# The `siderbarPanel()` should have the following control widgets:
sidebarPanel(
# A sliderInput labeled "Price (in dollars)". This slider should let the user pick a range
# between the minimum and maximum price of the entire diamond data set
sliderInput("price.choice", label = "Price (in dollars)", min = price.range[1], max = price.range[2], value = price.range),
# A sliderInput labeled "Carats". This slider should let the user pick a range
# between the minimum and maximum carats of the entire diamond data set
sliderInput("carat.choice", label = "Carats", min = carat.range[1], max = carat.range[2], value = carat.range),
# A checkboxInput labeled "Show Trendline". It's default value should be TRUE
checkboxInput("smooth", label = "Show Trendline", value = TRUE),
# A slectInput labeled "Facet By", with choices "cut", "clarity" and "color"
selectInput("facet.by", label = "Facet By", choices = c("cut", "clarity", "color"))
),
# The `mainPanel()` should have the following reactive outputs:
mainPanel(
# A plotOutput showing a plot based on the user specifications
plotOutput("plot"),
# Bonus: a dataTableOutput showing a data table of relevant observations
dataTableOutput('table')
)
)
)
# Define a Server function for the app
server <- function(input, output) {
# This function should take the `diamonds.sample` data set and filter it by the
# input price and carat ranges.
# Hint: use dplyr and multiple `filter()` operations
filtered <- reactive({
data <- diamonds.sample %>%
filter(price > input$price.choice[1] & price < input$price.choice[2]) %>%
filter(carat > input$carat.choice[1] & carat < input$carat.choice[2])
return(data)
})
# Assign a reactive `renderPlot()` function to the outputted `plot`
output$plot <- renderPlot({
# The filtered data set should then be used in a ggplot2 scatter plot with the
# carat on the x-axis, the price on the y-axis, and color based on the clarity
# You should specify facets based on what feature the user selected to "facet by"
#   (hint: you can just pass that string to the `facet_wrap()` function!)
graph <- ggplot(data = filtered(), mapping = aes(x = carat, y = price, color = clarity)) +
geom_point() + # okay so putting this shit ^^^ in geom_point() doesn't WORK for smooth
facet_wrap(input$facet.by)
# Finally, if the "trendline" checkbox is selected, you should also include a
# geom_smooth geometry (with `se=FALSE`)
# Hint: you'll need to use an `if` statement, and save the `ggplot` as a variable
#      that you can then add the geom to.
# Be sure and return the completed plot!
if(input$smooth) {
graph <- graph + geom_smooth(se = FALSE)
}
return(graph)
})
# Bonus: Assign a reactive `renderDataTable()` function to the outputted table
# You may want to use a `reactive()` variable to avoid needing to filter the data twice!
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, server = server)
# Load the shiny, ggplot2, and dplyr libraries
library(shiny)
library(ggplot2)
library(dplyr)
# install.packages('rsconnect')
library(rsconnect)
# You will once again be working with the `diamonds` data set provided by ggplot2
# Use dplyr's `sample_n()` function to get a random 3000 rows from the data set
# Store this sample in a variable `diamonds.sample`
diamonds.sample <- sample_n(diamonds, 3000)
# For convenience store the `range()` of values for the `price` and `carat` values
# for the ENTIRE diamonds dataset.
price.range <- range(diamonds$price)
carat.range <- range(diamonds$carat)
# Define a UI using a fluidPage layout
ui <- fluidPage(
# Include a `titlePanel` with the title "Diamond Viewer"
titlePanel("Diamond Viewer"),
# Include a `sidebarLayout()`
sidebarLayout(
# The `siderbarPanel()` should have the following control widgets:
sidebarPanel(
# A sliderInput labeled "Price (in dollars)". This slider should let the user pick a range
# between the minimum and maximum price of the entire diamond data set
sliderInput("price.choice", label = "Price (in dollars)", min = price.range[1], max = price.range[2], value = price.range),
# A sliderInput labeled "Carats". This slider should let the user pick a range
# between the minimum and maximum carats of the entire diamond data set
sliderInput("carat.choice", label = "Carats", min = carat.range[1], max = carat.range[2], value = carat.range),
# A checkboxInput labeled "Show Trendline". It's default value should be TRUE
checkboxInput("smooth", label = "Show Trendline", value = TRUE),
# A slectInput labeled "Facet By", with choices "cut", "clarity" and "color"
selectInput("facet.by", label = "Facet By", choices = c("cut", "clarity", "color"))
),
# The `mainPanel()` should have the following reactive outputs:
mainPanel(
# A plotOutput showing a plot based on the user specifications
plotOutput("plot"),
# Bonus: a dataTableOutput showing a data table of relevant observations
dataTableOutput('table')
)
)
)
# Define a Server function for the app
server <- function(input, output) {
# This function should take the `diamonds.sample` data set and filter it by the
# input price and carat ranges.
# Hint: use dplyr and multiple `filter()` operations
filtered <- reactive({
data <- diamonds.sample %>%
filter(price > input$price.choice[1] & price < input$price.choice[2]) %>%
filter(carat > input$carat.choice[1] & carat < input$carat.choice[2])
return(data)
})
# Assign a reactive `renderPlot()` function to the outputted `plot`
output$plot <- renderPlot({
# The filtered data set should then be used in a ggplot2 scatter plot with the
# carat on the x-axis, the price on the y-axis, and color based on the clarity
# You should specify facets based on what feature the user selected to "facet by"
#   (hint: you can just pass that string to the `facet_wrap()` function!)
graph <- ggplot(data = filtered(), mapping = aes(x = carat, y = price, color = clarity)) +
geom_point() + # okay so putting this shit ^^^ in geom_point() doesn't WORK for smooth
facet_wrap(input$facet.by)
# Finally, if the "trendline" checkbox is selected, you should also include a
# geom_smooth geometry (with `se=FALSE`)
# Hint: you'll need to use an `if` statement, and save the `ggplot` as a variable
#      that you can then add the geom to.
# Be sure and return the completed plot!
if(input$smooth) {
graph <- graph + geom_smooth(se = FALSE)
}
return(graph)
})
# Bonus: Assign a reactive `renderDataTable()` function to the outputted table
# You may want to use a `reactive()` variable to avoid needing to filter the data twice!
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, server = server)
runApp('Desktop/Class/2-q2/INFO201/module15-shiny/exercise-4')
runApp('Desktop/Class/2-q2/INFO201/module15-shiny/exercise-4')
runApp('Desktop/Class/2-q2/INFO201/module15-shiny/exercise-4')
runApp('Desktop/Class/2-q2/INFO201/module15-shiny/exercise-4')
runApp('Desktop/Class/2-q2/INFO201/module15-shiny/exercise-4')
setwd("~/Desktop")
read.csv("data/exams.csv", stringsAsFactors = FALSE)
data <- read.csv("data/exams.csv", stringsAsFactors = FALSE)
data <- read.csv("data/exams.csv", stringsAsFactors = FALSE)
View(data)
stem.data <- data %>%
filter(data[14])
library(dplyr)
stem.data <- data %>%
filter(data[14])
stem.data <- data %>%
filter(Exam Subject = BIOLOGY)
stem.data <- data %>%
filter("Exam Subject" = BIOLOGY)
stem.data <- data %>%
filter("Exam Subject" == BIOLOGY)
stem.data <- data %>%
filter("Exam Subject" == "BIOLOGY")
View(stem.data)
stem.data <- data %>%
filter(Exam Subject = "BIOLOGY")
stem.data <- data %>%
filter(Exam_Subject = "BIOLOGY")
stem.data <- data %>%
filter(Exam_Subject == "BIOLOGY")
stem.data <- data %>%
filter(Exam_Subject = BIOLOGY)
stem.data <- data %>%
filter(Exam_Subject == BIOLOGY)
stem.data <- data %>%
filter(Exam Subject == BIOLOGY)
stem.data <- data %>%
filter("Exam Subject" == BIOLOGY)
stem.data <- data %>%
filter(Exam.Subject = BIOLGY)
stem.data <- data %>%
filter(Exam.Subject == BIOLOGY)
stem.data <- data %>%
filter(Exam.Subject == "BIOLOGY")
View(stem.data)
stem.data <- data %>%
filter(Exam.Subject == "BIOLOGY", Exam.Subject == "CHEMISTRY", Exam.Subject == "CALCULUS AB",
Exam.Subject == "CALCULUS BC", Exam.Subject == "COMPUTER SCIENCE A",
Exam.Subject == "PHYSICS C: ELECTRICTY & MAGNETISM", Exam.Subject == "PHYSICS C: MECHANICS",
Exam.Subject == "PHYSICS 1", Exam.Subject == "PHYSICS 2", Exam.Subject == "STATISTICS")
View(stem.data)
View(stem.data)
stem.data <- data %>%
filter(Exam.Subject == "BIOLOGY" | Exam.Subject == "CHEMISTRY" | Exam.Subject == "CALCULUS AB" |
Exam.Subject == "CALCULUS BC" | Exam.Subject == "COMPUTER SCIENCE A" |
Exam.Subject == "PHYSICS C: ELECTRICTY & MAGNETISM" | Exam.Subject == "PHYSICS C: MECHANICS" |
Exam.Subject == "PHYSICS 1" | Exam.Subject == "PHYSICS 2" | Exam.Subject == "STATISTICS")
View(stem.data)
stem.data <- data %>%
filter(Exam.Subject == "BIOLOGY" | Exam.Subject == "CHEMISTRY" | Exam.Subject == "CALCULUS AB" |
Exam.Subject == "CALCULUS BC" | Exam.Subject == "COMPUTER SCIENCE A" |
Exam.Subject == "PHYSICS C: ELECTRICTY & MAGNETISM" | Exam.Subject == "PHYSICS C: MECHANICS" |
Exam.Subject == "PHYSICS 1" | Exam.Subject == "PHYSICS 2" | Exam.Subject == "STATISTICS") %>%
filter(Score == "Average")
View(stem.data)
stem.data <- data %>%
filter(Exam.Subject == "BIOLOGY" | Exam.Subject == "CHEMISTRY" | Exam.Subject == "CALCULUS AB" |
Exam.Subject == "CALCULUS BC" | Exam.Subject == "COMPUTER SCIENCE A" |
Exam.Subject == "PHYSICS C: ELECTRICTY & MAGNETISM" | Exam.Subject == "PHYSICS C: MECHANICS" |
Exam.Subject == "PHYSICS 1" | Exam.Subject == "PHYSICS 2" | Exam.Subject == "STATISTICS") %>%
filter(Score == "Average") %>%
select(Exam.Subject, Students..Female., Students..Male.)
average.stem.data <- data %>%
filter(Exam.Subject == "BIOLOGY" | Exam.Subject == "CHEMISTRY" | Exam.Subject == "CALCULUS AB" |
Exam.Subject == "CALCULUS BC" | Exam.Subject == "COMPUTER SCIENCE A" |
Exam.Subject == "PHYSICS C: ELECTRICTY & MAGNETISM" | Exam.Subject == "PHYSICS C: MECHANICS" |
Exam.Subject == "PHYSICS 1" | Exam.Subject == "PHYSICS 2" | Exam.Subject == "STATISTICS") %>%
filter(Score == "Average" | Score == "All") %>%
select(Exam.Subject, Students..Female., Students..Male.)
average.stem.data <- data %>%
filter(Exam.Subject == "BIOLOGY" | Exam.Subject == "CHEMISTRY" | Exam.Subject == "CALCULUS AB" |
Exam.Subject == "CALCULUS BC" | Exam.Subject == "COMPUTER SCIENCE A" |
Exam.Subject == "PHYSICS C: ELECTRICTY & MAGNETISM" | Exam.Subject == "PHYSICS C: MECHANICS" |
Exam.Subject == "PHYSICS 1" | Exam.Subject == "PHYSICS 2" | Exam.Subject == "STATISTICS") %>%
filter(Score == "Average" | Score == "All")
View(average.stem.data)
average.stem.data <- data %>%
filter(Exam.Subject == "BIOLOGY" | Exam.Subject == "CHEMISTRY" | Exam.Subject == "CALCULUS AB" |
Exam.Subject == "CALCULUS BC" | Exam.Subject == "COMPUTER SCIENCE A" |
Exam.Subject == "PHYSICS C: ELECTRICTY & MAGNETISM" | Exam.Subject == "PHYSICS C: MECHANICS" |
Exam.Subject == "PHYSICS 1" | Exam.Subject == "PHYSICS 2" | Exam.Subject == "STATISTICS") %>%
filter(Score == "Average" | Score == "All") %>%
select(-Students..11th.Grade., -Students..12th.Grade.)
filtered <- reactive({
average <- filter(average.stem.data, Score == "Average")
return(average)
})
library(shiny)
library(ggplot2)
library(dplyr)
library(plotly)
server <- function(input, output) {
filtered <- reactive({
average <- filter(average.stem.data, Score == "Average")
return(average)
})
}
server <- function(input, output) {
filtered <- reactive({
average <- filter(average.stem.data, Score == "Average")
return(average)
})
}
runApp('Class/2-q2/INFO201/info201-final-project')
runApp('Class/2-q2/INFO201/info201-final-project')
average.stem.data <- data %>%
filter(Exam.Subject == "BIOLOGY" | Exam.Subject == "CHEMISTRY" | Exam.Subject == "CALCULUS AB" |
Exam.Subject == "CALCULUS BC" | Exam.Subject == "COMPUTER SCIENCE A" |
Exam.Subject == "PHYSICS C: ELECTRICTY & MAGNETISM" | Exam.Subject == "PHYSICS C: MECHANICS" |
Exam.Subject == "PHYSICS 1" | Exam.Subject == "PHYSICS 2" | Exam.Subject == "STATISTICS") %>%
filter(Score == "Average" | Score == "All") %>%
select(-Students..11th.Grade., -Students..12th.Grade.)
data <- read.csv("data/exams.csv", stringsAsFactors = FALSE)
average.stem.data <- data %>%
filter(Exam.Subject == "BIOLOGY" | Exam.Subject == "CHEMISTRY" | Exam.Subject == "CALCULUS AB" |
Exam.Subject == "CALCULUS BC" | Exam.Subject == "COMPUTER SCIENCE A" |
Exam.Subject == "PHYSICS C: ELECTRICTY & MAGNETISM" | Exam.Subject == "PHYSICS C: MECHANICS" |
Exam.Subject == "PHYSICS 1" | Exam.Subject == "PHYSICS 2" | Exam.Subject == "STATISTICS") %>%
filter(Score == "Average" | Score == "All") %>%
select(-Students..11th.Grade., -Students..12th.Grade.)
setwd("~/Desktop/Class/2-q2/INFO201/info201-final-project")
data <- read.csv("data/exams.csv", stringsAsFactors = FALSE)
average.stem.data <- data %>%
filter(Exam.Subject == "BIOLOGY" | Exam.Subject == "CHEMISTRY" | Exam.Subject == "CALCULUS AB" |
Exam.Subject == "CALCULUS BC" | Exam.Subject == "COMPUTER SCIENCE A" |
Exam.Subject == "PHYSICS C: ELECTRICTY & MAGNETISM" | Exam.Subject == "PHYSICS C: MECHANICS" |
Exam.Subject == "PHYSICS 1" | Exam.Subject == "PHYSICS 2" | Exam.Subject == "STATISTICS") %>%
filter(Score == "Average" | Score == "All") %>%
select(-Students..11th.Grade., -Students..12th.Grade.)
average.stem.data <- data %>%
filter(Exam.Subject == "BIOLOGY" | Exam.Subject == "CHEMISTRY" | Exam.Subject == "CALCULUS AB" |
Exam.Subject == "CALCULUS BC" | Exam.Subject == "COMPUTER SCIENCE A" |
Exam.Subject == "PHYSICS C: ELECTRICTY & MAGNETISM" | Exam.Subject == "PHYSICS C: MECHANICS" |
Exam.Subject == "PHYSICS 1" | Exam.Subject == "PHYSICS 2" | Exam.Subject == "STATISTICS") %>%
select(-Students..11th.Grade., -Students..12th.Grade.)
runApp()
runApp()
filtered <- reactive({
average.score <- average.stem.data %>%
filter(Exam.Subject %in% input$subject) %>%
select(Exam.Subject, Score, Students..Male., Students..Female.) %>%
filter(Score == input$score | Score == "All") %>%
mutate(male = Students..Male.[1], male.all = Students..Male.[2]) %>%
mutate(female = Students..Female.[1], female.all = Students..Female.[2])
percent <- average.score %>%
group_by(Exam.Subject) %>%
summarize(Male.Percent = male / male.all, Female.Percent = female / female.all)
return(percent)
})
runApp()
library(tidyr)
library(tidyr)
percent <- average.score %>%
group_by(Exam.Subject) %>%
summarize(Male.Percent = male / male.all, Female.Percent = female / female.all)
filtered <- reactive({
average.score <- average.stem.data %>%
filter(Exam.Subject %in% input$subject) %>%
select(Exam.Subject, Score, Students..Male., Students..Female.) %>%
filter(Score == input$score | Score == "All") %>%
mutate(male = Students..Male.[1], male.all = Students..Male.[2]) %>%
mutate(female = Students..Female.[1], female.all = Students..Female.[2])
percent <- average.score %>%
group_by(Exam.Subject) %>%
summarize(Male.Percent = male / male.all, Female.Percent = female / female.all)
return(percent)
})
runApp()
runApp()
runApp()
runApp()
runApp()
filtered <- reactive({
average.score <- average.stem.data %>%
filter(Exam.Subject %in% input$subject) %>%
select(Exam.Subject, Score, Students..Male., Students..Female.) %>%
filter(Score == input$score | Score == "All")
percent <- average.score %>%
group_by(Exam.Subject) %>%
mutate(male.count = Students..Male.[1], male.all = Students..Male.[2]) %>%
mutate(female.count = Students..Female.[1], female.all = Students..Female.[2])
summarize(Male = male.count / male.all, Female = female.count / female.all)
percent <-gather(percent, key = Sex, value = Percentage, Male, Female)
return(percent)
})
output$bar <- renderPlotly({
graph <- ggplot(data = filtered(), mapping = aes(x = Exam.Subject, y = Percentage, color = Sex)) +
geom_bar()
return(ggplotly(graph))
})
filtered <- reactive({
average.score <- average.stem.data %>%
filter(Exam.Subject %in% input$subject) %>%
select(Exam.Subject, Score, Students..Male., Students..Female.) %>%
filter(Score == input$score | Score == "All")
percent <- average.score %>%
group_by(Exam.Subject) %>%
mutate(male.count = Students..Male.[1], male.all = Students..Male.[2]) %>%
mutate(female.count = Students..Female.[1], female.all = Students..Female.[2])
summarize(Male = male.count / male.all, Female = female.count / female.all)
percent <-gather(percent, key = Sex, value = Percentage, Male, Female)
return(percent)
})
output$bar <- renderPlotly({
graph <- ggplot(data = filtered(), mapping = aes(x = Exam.Subject, y = Percentage, color = Sex)) +
geom_bar()
return(ggplotly(graph))
})
server <- function(input, output) {
filtered <- reactive({
average.score <- average.stem.data %>%
filter(Exam.Subject %in% input$subject) %>%
select(Exam.Subject, Score, Students..Male., Students..Female.) %>%
filter(Score == input$score | Score == "All")
percent <- average.score %>%
group_by(Exam.Subject) %>%
mutate(male.count = Students..Male.[1], male.all = Students..Male.[2]) %>%
mutate(female.count = Students..Female.[1], female.all = Students..Female.[2])
summarize(Male = male.count / male.all, Female = female.count / female.all)
percent <-gather(percent, key = Sex, value = Percentage, Male, Female)
return(percent)
})
output$bar <- renderPlotly({
graph <- ggplot(data = filtered(), mapping = aes(x = Exam.Subject, y = Percentage, color = Sex)) +
geom_bar()
return(ggplotly(graph))
})
}
runApp()
runApp()
runApp()
filtered <- reactive({
average.score <- average.stem.data %>%
filter(Exam.Subject %in% input$subject) %>%
select(Exam.Subject, Score, Students..Male., Students..Female.) %>%
filter(Score == input$score | Score == "All")
percent <- average.score %>%
group_by(Exam.Subject) %>%
mutate(male.count = Students..Male.[1], male.all = Students..Male.[2]) %>%
mutate(female.count = Students..Female.[1], female.all = Students..Female.[2]) %>%
summarize(Male = male.count / male.all, Female = female.count / female.all)
percent <- gather(percent, key = Sex, value = Percentage, Male, Female)
return(percent)
})
output$bar <- renderPlotly({
graph <- ggplot(data = filtered(), mapping = aes(x = Exam.Subject, y = Percentage, color = Sex)) +
geom_bar()
return(ggplotly(graph))
})
server <- function(input, output) {
filtered <- reactive({
average.score <- average.stem.data %>%
filter(Exam.Subject %in% input$subject) %>%
select(Exam.Subject, Score, Students..Male., Students..Female.) %>%
filter(Score == input$score | Score == "All")
percent <- average.score %>%
group_by(Exam.Subject) %>%
mutate(male.count = Students..Male.[1], male.all = Students..Male.[2]) %>%
mutate(female.count = Students..Female.[1], female.all = Students..Female.[2]) %>%
summarize(Male = male.count / male.all, Female = female.count / female.all)
percent <- gather(percent, key = Sex, value = Percentage, Male, Female)
return(percent)
})
output$bar <- renderPlotly({
graph <- ggplot(data = filtered(), mapping = aes(x = Exam.Subject, y = Percentage, color = Sex)) +
geom_bar()
return(ggplotly(graph))
})
}
View(percent_rank())
View(percent)
runApp()
runApp()
runApp()
View(average.score)
View(average.score)
runApp()
average.score <- average.stem.data %>%
#filter(Exam.Subject %in% input$subject) %>%
filter(Exam.Subject == "CALCULUS AB") %>%
select(Exam.Subject, Score, Students..Male., Students..Female.) %>%
#filter(Score == input$score | Score == "All")
filter(Score == 5 | Score == "All")
View(average.score)
average.score <- average.stem.data %>%
#filter(Exam.Subject %in% input$subject) %>%
filter(Exam.Subject == "CALCULUS AB") %>%
select(Exam.Subject, Score, Students..Male., Students..Female.) %>%
#filter(Score == input$score | Score == "All")
filter(Score == 5 | Score == "All")
percent <- average.score %>%
group_by(Exam.Subject) %>%
mutate(male.count = Students..Male.[1], male.all = Students..Male.[2]) %>%
mutate(female.count = Students..Female.[1], female.all = Students..Female.[2]) %>%
summarize(Male = male.count / male.all, Female = female.count / female.all)
percent <- gather(percent, key = Sex, value = Percentage, Male, Female)
percent <- average.score %>%
group_by(Exam.Subject) %>%
mutate(male.count = Students..Male.[1], male.all = Students..Male.[2]) %>%
mutate(female.count = Students..Female.[1], female.all = Students..Female.[2]) %>%
summarize(Male = male.count / male.all, Female = female.count / female.all)
percent <- average.score %>%
group_by(Exam.Subject) %>%
mutate(male.count = Students..Male.[1], male.all = Students..Male.[2])
percent <- average.score %>%
group_by(Exam.Subject) %>%
mutate(male.count = Students..Male.[1], male.all = Students..Male.[2]) %>%
mutate(female.count = Students..Female.[1], female.all = Students..Female.[2])
View(percent)
percent <- average.score %>%
group_by(Exam.Subject) %>%
mutate(male.count = Students..Male.[1], male.all = Students..Male.[2]) %>%
mutate(female.count = Students..Female.[1], female.all = Students..Female.[2]) %>%
mutate(Male = male.count / male.all, Female = female.count / female.all)
percent <- gather(percent, key = Sex, value = Percentage, Male, Female)
View(percent)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
