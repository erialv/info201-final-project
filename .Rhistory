response <- GET(paste0(base.uri, "/legislators/locate?zip=", zip.code))
body <- content(response, "text")
rep.data <- fromJSON(body)
is.data.frame(rep.data)
names(rep.data)
str(rep.data)
response <- GET(paste0(base.uri, "/legislators/locate?zip=", zip.code))
body <- content(response, "text")
parsed.rep.data <- fromJSON(body)
is.data.frame(parsed.rep.data)
names(parsed.rep.data)
str(parsed.rep.data)
rep.data <- parsed.rep.data$results
response <- GET(paste0(base.uri, "/legislators/locate?zip=", zip.code))
body <- content(response, "text")
parsed.rep.data <- fromJSON(body)
#is.data.frame(parsed.rep.data)
#names(parsed.rep.data)
#str(parsed.rep.data)
rep.data <- flatten(parsed.rep.data$results)
rep.data
View(rep.data)
response <- GET(paste0(base.uri, "/legislators/locate?zip=", zip.code))
body <- content(response, "text")
parsed.rep.data <- fromJSON(body)
#is.data.frame(parsed.rep.data)
#names(parsed.rep.data)
#str(parsed.rep.data)
rep.data <- flatten(parsed.rep.data$results)
rep.data
paste0(rep.data$first_name, " ", rep.data$last_name, " (", rep.data$state, "-", rep.data$party, ") ", "Phone: ", rep.data$phone)
install.packages("ggplot2")
library(ggplot2)
library(dplyr)
library("ggplot2")
library("dplyr")
?diamonds
colnames(diamonds)
sample_n(diamonds)
sample_n(diamonds, 1000)
ggplot(diamonds.sample)
diamonds.sample <- sample_n(diamonds, 1000)
# Start by making a new `ggplot` with the `diamonds.sample` as the data (no geometry yet)
# What do you see?
ggplot(diamonds.sample)
knitr::opts_chunk$set(echo = TRUE)
#install.packages("tidyr")
#install.packages("maps")
library(tidyr)
library(ggplot2)
library(knitr)
library(dplyr)
library(maps)
country.yes <- read.csv("data/GDPcap_ClimateChange_RCP85_SSP5.csv")
country.no <- read.csv("data/GDPcap_NOClimateChange_RCP85_SSP5.csv")
definitions <- read.csv("data/CountryIndicators - Definition and Source.csv")
wb.indicators <- read.csv("data/WorldBank_CountryIndicators.csv")
percent.change <- data.frame((country.yes - country.no)/country.no)
percent.change$ISO3 <- country.yes$ISO3
percent.change$ISO2 <- country.yes$ISO2
percent.change$name <- country.yes$name
percent.change <- select(percent.change, ISO3, name, X2010, X2020, X2030, X2040, X2050, X2060, X2070, X2080, X2090)
world <- map_data("world")
# Finding all of the ISO3 codes for each country in the world and storing them into a vector named country.codes
country.codes <- iso.alpha(world$region, n = 3)
# Mutating the world dataframe to include a column called ISO3 containing the vector country.codes
world <- mutate(world, ISO3 = country.codes)
# Joining the world dataframe with the diff.climate.change dataframe to create a new dataframe that includes the predicted per capita GDP for each country - new dataframe named world.climate.change
world.climate.change <- left_join(world, percent.change, by = "ISO3")
# Transforming the wide world.climate.change dataframe into a long dataframe grouped by the year and GDP values
world.climate.change <- gather(world.climate.change, key = Year,
value = GDP,
X2010, X2030, X2050, X2070, X2090, X2099)
# Loading the world map data into a dataframe called world
world <- map_data("world")
# Finding all of the ISO3 codes for each country in the world and storing them into a vector named country.codes
country.codes <- iso.alpha(world$region, n = 3)
# Mutating the world dataframe to include a column called ISO3 containing the vector country.codes
world <- mutate(world, ISO3 = country.codes)
# Joining the world dataframe with the diff.climate.change dataframe to create a new dataframe that includes the predicted per capita GDP for each country - new dataframe named world.climate.change
world.climate.change <- left_join(world, percent.change, by = "ISO3")
# Transforming the wide world.climate.change dataframe into a long dataframe grouped by the year and GDP values
world.climate.change <- gather(world.climate.change, key = Year,
value = GDP,
X2010, X2020, X2030, X2040, X2050, X2060, X2070, X2080, X2090)
# Plotting the world.climate.change dataframe into a six world sub-plots describing each of the chosen years using the facets in ggplot() - x-axis displaying the latitude, y-axis displaying the longitude, fill displaying GDP, palette set to the color scheme Set2, and countries without a GDP value set to color grey50
ggplot(data = world.climate.change) +
geom_polygon(aes(x = long, y = lat, group = group, fill = GDP)) +
facet_wrap(~Year) +
coord_quickmap() +
scale_fill_distiller(name="Percent", palette = "Set2", na.value = "grey50") +
labs(title="Percent GDP Change every 20 Years")
world <- map_data("world")
# Fidns all ISO3 codes and stores into country.codes
country.codes <- iso.alpha(world$region, n = 3)
# Adds column with ISO3 codes to world
world <- mutate(world, ISO3 = country.codes)
# Joins world with percent.change. New dataframe has predicted GDP for each country, with climate change taken into account
world.climate.change <- left_join(world, percent.change, by = "ISO3")
# Transforms the wide world.climate.change into a long dataframe grouped by year and GDP
world.climate.change <- gather(world.climate.change, key = Year,
value = GDP,
X2010, X2020, X2030, X2040, X2050, X2060, X2070, X2080, X2090)
# Plots world.climate.change into a six world sub-plots describing each of the chosen years using the facets in ggplot() - x-axis displaying the latitude, y-axis displaying the longitude, fill displaying GDP, palette set to the color scheme Set2, and countries without a GDP value set to color grey50
ggplot(data = world.climate.change) +
geom_polygon(aes(x = long, y = lat, group = group, fill = GDP)) +
facet_wrap(~Year) +
coord_quickmap() +
scale_fill_distiller(name="Percent", palette = "Set2", na.value = "grey50") +
labs(title="Percent GDP Change every 10 Years")
# Loads world map data into a data frame
world <- map_data("world")
# Fidns all ISO3 codes and stores into country.codes
country.codes <- iso.alpha(world$region, n = 3)
# Adds column with ISO3 codes to world
world <- mutate(world, ISO3 = country.codes)
# Joins world with percent.change. New dataframe has predicted GDP for each country, with climate change taken into account
world.climate.change <- left_join(world, percent.change, by = "ISO3")
# Transforms the wide world.climate.change into a long dataframe grouped by year and GDP
world.climate.change <- gather(world.climate.change, key = Year,
value = GDP,
X2010, X2020, X2030, X2040, X2050, X2060, X2070, X2080, X2090)
# Plots world.climate.change into a six world sub-plots describing each of the chosen years using the facets in ggplot() - x-axis displaying the latitude, y-axis displaying the longitude, fill displaying GDP, palette set to the color scheme Set2, and countries without a GDP value set to color grey50
ggplot(data = world.climate.change) +
geom_polygon(aes(x = long, y = lat, group = group, fill = GDP)) +
facet_wrap(~Year) +
coord_quickmap() +
scale_fill_distiller(name="Percent", palette = "Set3", na.value = "grey50") +
labs(title="Percent GDP Change every 10 Years")
# Loads world map data into a data frame
world <- map_data("world")
# Fidns all ISO3 codes and stores into country.codes
country.codes <- iso.alpha(world$region, n = 3)
# Adds column with ISO3 codes to world
world <- mutate(world, ISO3 = country.codes)
# Joins world with percent.change. New dataframe has predicted GDP for each country, with climate change taken into account
world.climate.change <- left_join(world, percent.change, by = "ISO3")
# Transforms the wide world.climate.change into a long dataframe grouped by year and GDP
world.climate.change <- gather(world.climate.change, key = Year,
value = GDP,
X2010, X2020, X2030, X2040, X2050, X2060, X2070, X2080, X2090)
# Plots world.climate.change into six world subplots, each describing one of the selected years' data. The x-axis displays latitude, y-axis displays longitude, fill displaying GDP, palette set to the color scheme Set3, and countries without a GDP value are set to color grey50
ggplot(data = world.climate.change) +
geom_polygon(aes(x = long, y = lat, group = group, fill = GDP)) +
facet_wrap(~Year) +
coord_quickmap() +
scale_fill_distiller(name="Percent", palette = "Set1", na.value = "grey50") +
labs(title="Percent GDP Change every 10 Years")
# Loads world map data into a data frame
world <- map_data("world")
# Fidns all ISO3 codes and stores into country.codes
country.codes <- iso.alpha(world$region, n = 3)
# Adds column with ISO3 codes to world
world <- mutate(world, ISO3 = country.codes)
# Joins world with percent.change. New dataframe has predicted GDP for each country, with climate change taken into account
world.climate.change <- left_join(world, percent.change, by = "ISO3")
# Transforms the wide world.climate.change into a long dataframe grouped by year and GDP
world.climate.change <- gather(world.climate.change, key = Year,
value = GDP,
X2010, X2020, X2030, X2040, X2050, X2060, X2070, X2080, X2090)
# Plots world.climate.change into six world subplots, each describing one of the selected years' data. The x-axis displays latitude, y-axis displays longitude, fill displaying GDP, palette set to the color scheme Set3, and countries without a GDP value are set to color grey50
ggplot(data = world.climate.change) +
geom_polygon(aes(x = long, y = lat, group = group, fill = GDP)) +
facet_wrap(~Year) +
coord_quickmap() +
scale_fill_distiller(name="Percent", palette = "Blues", na.value = "grey50") +
labs(title="Percent GDP Change every 10 Years")
ercent.change.norway <- percent.change %>%
filter(name == "Norway")
percent.change.norway <- gather(percent.change.norway,
key = year,
value = GDP,
X2010, X2020, X2030, X2040, X2050, X2060, X2070, X2080, X2090)
knitr::opts_chunk$set(echo = TRUE)
#install.packages("tidyr")
#install.packages("maps")
library(tidyr)
library(ggplot2)
library(knitr)
library(dplyr)
library(maps)
country.yes <- read.csv("data/GDPcap_ClimateChange_RCP85_SSP5.csv")
country.no <- read.csv("data/GDPcap_NOClimateChange_RCP85_SSP5.csv")
definitions <- read.csv("data/CountryIndicators - Definition and Source.csv")
wb.indicators <- read.csv("data/WorldBank_CountryIndicators.csv")
percent.change <- data.frame((country.yes - country.no)/country.no)
percent.change$ISO3 <- country.yes$ISO3
percent.change$ISO2 <- country.yes$ISO2
percent.change$name <- country.yes$name
percent.change <- select(percent.change, ISO3, name, X2010, X2020, X2030, X2040, X2050, X2060, X2070, X2080, X2090)
percent.change.norway <- percent.change %>%
filter(name == "Norway")
percent.change.norway <- gather(percent.change.norway,
key = year,
value = GDP,
X2010, X2020, X2030, X2040, X2050, X2060, X2070, X2080, X2090)
years.by.ten <- c("2010", "2020", "2030", "2040", "2050", "2060", "2070", "2080", "2090")
percent.change.norway$year <- years.by.ten
ggplot(data = percent.change.norway) +
geom_bar(mapping = aes(x = year, y = GDP), stat = "identity", color = "red")
life.expectancy <- wb.indicators %>%
filter(Series.Code == "SP.DYN.LE00.IN") %>%
select(-Country.Code)
colnames(life.expectancy) <- c("Series.Name", "Series.Code", "name", "value")
life.expectancy.GDP <- left_join(country.yes, life.expectancy, by = "name")
ggplot(data = life.expectancy.GDP) +
geom_point(mapping = aes(x = X2017, y = value)) +
geom_smooth(mapping = aes(x = X2017, y = value))
ggplot(data = percent.change.norway) +
geom_bar(mapping = aes(x = year, y = GDP), stat = "identity", fill = "red")
ggplot(data = percent.change.norway) +
geom_bar(mapping = aes(x = year, y = GDP), stat = "identity", fill = "blue")
ggplot(data = percent.change.norway) +
geom_bar(mapping = aes(x = year, y = GDP), stat = "identity", fill = "green")
ggplot(data = percent.change.norway) +
geom_bar(mapping = aes(x = year, y = GDP), stat = "identity", fill = "yellow")
ggplot(data = percent.change.norway) +
geom_bar(mapping = aes(x = year, y = GDP), stat = "identity", fill = "orange")
# Loads world map data into a data frame
world <- map_data("world")
# Fidns all ISO3 codes and stores into country.codes
country.codes <- iso.alpha(world$region, n = 3)
# Adds column with ISO3 codes to world
world <- mutate(world, ISO3 = country.codes)
# Joins world with percent.change. New dataframe has predicted GDP for each country, with climate change taken into account
world.climate.change <- left_join(world, percent.change, by = "ISO3")
# Transforms the wide world.climate.change into a long dataframe grouped by year and GDP
world.climate.change <- gather(world.climate.change, key = Year,
value = GDP,
X2010, X2020, X2030, X2040, X2050, X2060, X2070, X2080, X2090)
# Plots world.climate.change into six world subplots, each describing one of the selected years' data. The x-axis displays latitude, y-axis displays longitude, fill displaying GDP, palette set to the color scheme Set3, and countries without a GDP value are set to color grey50
ggplot(data = world.climate.change) +
geom_polygon(aes(x = long, y = lat, group = group, fill = GDP)) +
facet_wrap(~Year) +
coord_quickmap() +
scale_fill_distiller(name="Percent", palette = "Set1", na.value = "grey50") +
labs(title="Percent GDP Change every 10 Years")
library(plotly)
install.packages("plotly")
library(plotly)
ggplotly(chloro)
chloro <- ggplot(data = world.climate.change) +
geom_polygon(aes(x = long, y = lat, group = group, fill = GDP)) +
facet_wrap(~Year) +
coord_quickmap() +
scale_fill_distiller(name="Percent", palette = "Set1", na.value = "grey50") +
labs(title="Percent GDP Change every 10 Years")
ggplotly(chloro)
chloro <- ggplot(data = world.climate.change) +
geom_polygon(aes(x = longitude, y = latitude, group = group, fill = GDP)) +
facet_wrap(~Year) +
coord_quickmap() +
scale_fill_distiller(name="Percent", palette = "Set1", na.value = "grey50") +
labs(title="Percent GDP Change every 10 Years")
# Loads world map data into a data frame
world <- map_data("world")
# Fidns all ISO3 codes and stores into country.codes
country.codes <- iso.alpha(world$region, n = 3)
# Adds column with ISO3 codes to world
world <- mutate(world, ISO3 = country.codes)
# Joins world with percent.change. New dataframe has predicted GDP for each country, with climate change taken into account
world.climate.change <- left_join(world, percent.change, by = "ISO3")
# Transforms the wide world.climate.change into a long dataframe grouped by year and GDP
world.climate.change <- gather(world.climate.change, key = Year,
value = GDP,
X2010, X2020, X2030, X2040, X2050, X2060, X2070, X2080, X2090)
# Plots world.climate.change into subplots which each describe a specific year of data. Countries without a GDP value are set to color grey50
chloro <- ggplot(data = world.climate.change) +
geom_polygon(aes(x = longitude, y = latitude, group = group, fill = GDP)) +
facet_wrap(~Year) +
coord_quickmap() +
scale_fill_distiller(name="Percent", palette = "Set1", na.value = "grey50") +
labs(title="Percent GDP Change every 10 Years")
world.climate.change <- left_join(world, percent.change, by = "ISO3")
# Loads world map data into a data frame
world <- map_data("world")
# Fidns all ISO3 codes and stores into country.codes
country.codes <- iso.alpha(world$region, n = 3)
# Adds column with ISO3 codes to world
world <- mutate(world, ISO3 = country.codes)
# Joins world with percent.change. New dataframe has predicted GDP for each country, with climate change taken into account
world.climate.change <- left_join(world, percent.change, by = "ISO3")
# Transforms the wide world.climate.change into a long dataframe grouped by year and GDP
world.climate.change <- gather(world.climate.change, key = Year,
value = GDP,
X2010, X2020, X2030, X2040, X2050, X2060, X2070, X2080, X2090)
# Plots world.climate.change into subplots which each describe a specific year of data. Countries without a GDP value are set to color grey50
chloro <- ggplot(data = world.climate.change) +
geom_polygon(aes(x = longitude, y = latitude, group = group, fill = GDP)) +
facet_wrap(~Year) +
coord_quickmap() +
scale_fill_distiller(name="Percent", palette = "Set1", na.value = "grey50") +
labs(title="Percent GDP Change every 10 Years")
knitr::opts_chunk$set(echo = TRUE)
#install.packages("tidyr")
#install.packages("maps")
#install.packages("plotly")
library(tidyr)
library(ggplot2)
library(knitr)
library(dplyr)
library(maps)
library(plotly)
# Reads all data in
country.yes <- read.csv("data/GDPcap_ClimateChange_RCP85_SSP5.csv")
country.no <- read.csv("data/GDPcap_NOClimateChange_RCP85_SSP5.csv")
definitions <- read.csv("data/CountryIndicators - Definition and Source.csv")
wb.indicators <- read.csv("data/WorldBank_CountryIndicators.csv")
# Creates a data frame of the percent change in GDP for all countries
percent.change <- data.frame((country.yes - country.no)/country.no)
# Brings in ISO3, ISO2, and country names from the country.yes data frame,
# since that data was lost in the previous line of code
percent.change$ISO3 <- country.yes$ISO3
percent.change$ISO2 <- country.yes$ISO2
percent.change$name <- country.yes$name
# Selects every 10 years of data from percent.change
percent.change <- select(percent.change, ISO3, name, X2010, X2020, X2030, X2040, X2050, X2060, X2070, X2080, X2090)
# Loads world map data into a data frame
world <- map_data("world")
# Fidns all ISO3 codes and stores into country.codes
country.codes <- iso.alpha(world$region, n = 3)
# Adds column with ISO3 codes to world
world <- mutate(world, ISO3 = country.codes)
# Joins world with percent.change. New dataframe has predicted GDP for each country, with climate change taken into account
world.climate.change <- left_join(world, percent.change, by = "ISO3")
# Transforms the wide world.climate.change into a long dataframe grouped by year and GDP
world.climate.change <- gather(world.climate.change, key = Year,
value = GDP,
X2010, X2020, X2030, X2040, X2050, X2060, X2070, X2080, X2090)
# Plots world.climate.change into subplots which each describe a specific year of data. Countries without a GDP value are set to color grey50
chloro <- ggplot(data = world.climate.change) +
geom_polygon(aes(x = long, y = lat, group = group, fill = GDP)) +
facet_wrap(~Year) +
coord_quickmap() +
scale_fill_distiller(name="Percent", palette = "Set1", na.value = "grey50") +
labs(title="Percent GDP Change every 10 Years")
ggplot(data = life.expectancy.GDP) +
geom_point(mapping = aes(x = X2017, y = value)) +
geom_smooth(mapping = aes(x = X2017, y = value))
# Filters percent.change for all data about Norway
percent.change.norway <- percent.change %>%
filter(name == "Norway")
# Gathers year data into a single column
percent.change.norway <- gather(percent.change.norway,
key = year,
value = GDP,
X2010, X2020, X2030, X2040, X2050, X2060, X2070, X2080, X2090)
# Assigns more readable year names to year column in percent.change.norway
years.by.ten <- c("2010", "2020", "2030", "2040", "2050", "2060", "2070", "2080", "2090")
percent.change.norway$year <- years.by.ten
# PLots the percent change in GDP of Norway every 10 years as a bar graph
ggplot(data = percent.change.norway) +
geom_bar(mapping = aes(x = year, y = GDP), stat = "identity", fill = "orange")
# Filters world bank indicators data frame for life expectancy data and discards Country.Code column
life.expectancy <- wb.indicators %>%
filter(Series.Code == "SP.DYN.LE00.IN") %>%
select(-Country.Code)
# Renames columns to ensure successful join
colnames(life.expectancy) <- c("Series.Name", "Series.Code", "name", "value")
# Joins GDP with climate change data with life expectancy data
life.expectancy.GDP <- left_join(country.yes, life.expectancy, by = "name")
# PLots GDP data for 2017 (x-axis) with life expectancy data
ggplot(data = life.expectancy.GDP) +
geom_point(mapping = aes(x = X2017, y = value)) +
geom_smooth(mapping = aes(x = X2017, y = value))
shiny::runApp('Desktop/info201/randomshit')
runApp('Desktop/info201/randomshit')
runApp('Desktop/info201/randomshit')
runApp('Desktop/info201/randomshit')
runApp('Desktop/info201/randomshit')
runApp('Desktop/info201/randomshit')
runApp('Desktop/info201/randomshit')
runApp('Desktop/info201/randomshit')
runApp('Desktop/info201/randomshit')
runApp('Desktop/info201/randomshit')
runApp('Desktop/info201/randomshit')
runApp('Desktop/info201/participation/module15-shiny/exercise-1')
my.ui <- fluidPage(
# Include a `titlePanel` layout with the text "Cost Calculator"
titlePanel("Cost Calculator"),
# Include a `numericInput()` widget with the label "Price (in dollars)"
# It should have a default value of 0 and a minimum value of 0
# Hint: look up the function in the documentation!
numericInput('price', label = "Price (in dollars)"),
?numericInput
# Include a `numericInput()` widget with the label "Quantity"
# It should have a default value of 1 and a minimum value of 1
# Include the word "Cost" strongly bolded
# Include a `textOutput()` output of the calculated `cost`
)
my.ui <- fluidPage(
# Include a `titlePanel` layout with the text "Cost Calculator"
titlePanel("Cost Calculator"),
# Include a `numericInput()` widget with the label "Price (in dollars)"
# It should have a default value of 0 and a minimum value of 0
# Hint: look up the function in the documentation!
numericInput('price', label = "Price (in dollars)"),
?numericInput
# Include a `numericInput()` widget with the label "Quantity"
# It should have a default value of 1 and a minimum value of 1
# Include the word "Cost" strongly bolded
# Include a `textOutput()` output of the calculated `cost`
)
runApp('Desktop/info201/participation/module15-shiny/exercise-1')
# load the "shiny" library
library(shiny)
# Define a new `ui` variable. This variable should be assigned a `fluidPage` layout
my.ui <- fluidPage(
# Include a `titlePanel` layout with the text "Cost Calculator"
titlePanel("Cost Calculator"),
# Include a `numericInput()` widget with the label "Price (in dollars)"
# It should have a default value of 0 and a minimum value of 0
# Hint: look up the function in the documentation!
numericInput('price', label = "Price (in dollars)", value = 0, min = 0)
# Include a `numericInput()` widget with the label "Quantity"
# It should have a default value of 1 and a minimum value of 1
# Include the word "Cost" strongly bolded
# Include a `textOutput()` output of the calculated `cost`
)
# Define a `server` function (with appropriate arguments)
# Assign a reactive `renderText()` function to the outputted `cost`
# The reactive expression should return the inputed `price` times the `quantity`
# So it looks nice, paste a "$" in front of it!
# Create a new `shinyApp()` using the above ui and server
runApp('Desktop/info201/participation/module15-shiny/exercise-1')
runApp('Desktop/info201/participation/module15-shiny/exercise-1')
# load the "shiny" library
library(shiny)
# Define a new `ui` variable. This variable should be assigned a `fluidPage` layout
ui <- fluidPage(
# Include a `titlePanel` layout with the text "Cost Calculator"
titlePanel("Cost Calculator"),
# Include a `numericInput()` widget with the label "Price (in dollars)"
# It should have a default value of 0 and a minimum value of 0
# Hint: look up the function in the documentation!
numericInput("price", label = "Price (in dollars)", value = 0, min = 0),
# Include a `numericInput()` widget with the label "Quantity"
# It should have a default value of 1 and a minimum value of 1
numericInput("quantity", label = "Quantity", value = 0, min = 1),
# Include the word "Cost" strongly bolded
strong("Cost"),
# Include a `textOutput()` output of the calculated `cost`
textOutput("cost")
)
# Define a `server` function (with appropriate arguments)
server <- function(input, output) {
# Assign a reactive `renderText()` function to the outputted `cost`
# The reactive expression should return the inputed `price` times the `quantity`
# So it looks nice, paste a "$" in front of it!
output$cost <- renderText({
return(paste0("$", input$price, output$quantity))
})
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, server = server)
runApp('Desktop/info201/participation/module15-shiny/exercise-1')
runApp('Desktop/info201/participation/module15-shiny/exercise-1')
shiny::runApp('Desktop/info201/participation/module15-shiny/exercise-2')
runApp('Desktop/info201/participation/module15-shiny/exercise-2')
runApp('Desktop/info201/participation/module15-shiny/exercise-2')
runApp('Desktop/info201/participation/module15-shiny/exercise-2')
runApp('Desktop/info201/participation/module15-shiny/exercise-2')
runApp('Desktop/info201/participation/module15-shiny/exercise-2')
runApp('Desktop/info201/participation/module15-shiny/exercise-2')
runApp('Desktop/info201/participation/module15-shiny/exercise-2')
runApp('Desktop/info201/participation/module15-shiny/exercise-2')
runApp('Desktop/info201/participation/module15-shiny/exercise-2')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='asaroya',
token='CF6E19F119EF371EA11C7E536F7AE19C',
secret='<SECRET>')
rsconnect::setAccountInfo(name='asaroya',
token='CF6E19F119EF371EA11C7E536F7AE19C',
secret='<SECRET>')
rsconnect::setAccountInfo(name='asaroya',
token='CF6E19F119EF371EA11C7E536F7AE19C',
secret='ML4AGvNBVot7xK9YfR6vORXvbvtRmCF2ZImct9w7')
rsconnect::setAccountInfo(name='asaroya',
token='CF6E19F119EF371EA11C7E536F7AE19C',
secret='ML4AGvNBVot7xK9YfR6vORXvbvtRmCF2ZImct9w7')
ct
cat("\014")
runApp('Desktop/info201/participation/module15-shiny/exercise-2')
runApp('Desktop/info201/participation/module15-shiny/exercise-2')
runApp('Desktop/info201/participation/module15-shiny/exercise-2')
runApp('Desktop/info201/participation/module15-shiny/exercise-2')
runApp('Desktop/info201/participation/module15-shiny/exercise-2')
runApp('Desktop/info201/participation/module15-shiny/exercise-2')
shiny::runApp('Desktop/info201/assignments/a8-data-app-arshmallo')
runApp('Desktop/info201/assignments/a8-data-app-arshmallo')
runApp('Desktop/info201/assignments/a8-data-app-arshmallo')
runApp('Desktop/info201/assignments/a8-data-app-arshmallo')
setwd("~/Desktop/info201/project/info201-final-project")
shiny::runApp()
runApp()
data <- read.csv("data/exams.csv", stringsAsFactors = FALSE)
stem.subjects <- c("BIOLOGY", "CHEMISTRY", "CALCULUS AB", "CALCULUS BC", "COMPUTER SCIENCE A", "PHYSICS C: ELECTRICITY & MAGNETISM", "PHYSICS C: MECHANICS",
"PHYSICS 1", "PHYSICS 2", "STATISTICS")
stem.data <- data %>%
filter(Exam.Subject %in% stem.subjects) %>%
select(-Students..11th.Grade., -Students..12th.Grade.)
data.students <- read.csv("data/students.csv", stringsAsFactors = FALSE)
data.students <- data.students[-c(38, 39), ]
shiny::runApp()
stem.data <- data %>%
filter(Exam.Subject %in% stem.subjects) %>%
select(-Students..11th.Grade., -Students..12th.Grade.)
runApp()
install.packages("shinythemes")
runApp()
runApp()
runApp()
